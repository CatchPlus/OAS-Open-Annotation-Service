# -*- coding: utf-8 -*-
## begin license ##
# 
# "Open Annotation Service" enables exchange, storage and search of
# heterogeneous annotations using a uniform format (Open Annotation format) and
# a uniform web service interface. 
# 
# Copyright (C) 2012 Meertens Instituut (KNAW) http://meertens.knaw.nl
# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
# 
# This file is part of "Open Annotation Service"
# 
# "Open Annotation Service" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# "Open Annotation Service" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with "Open Annotation Service"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
# 
## end license ##

import page

CONTENT_TYPES = [ 
    ('HTML', 'html'), 
    ('XML', 'application/sparql-results+xml'), 
    ('JSON', 'application/sparql-results+json'),
]

BROWSER_TYPE = ['text/html',  'application/xhtml+xml', '*/*']

def isProbablyABrowser(Headers):
    if not 'Accept' in Headers:
        return False
    
    types = set([t.split(';')[0].strip() for t in Headers['Accept'].split(',')])
    return bool(types.intersection(BROWSER_TYPE))


def main(arguments, Method, Headers, **kwargs):
    queryArgument = arguments.get("query", [''])[0]
    contentType = arguments.get("contentType", [None])[0]

    if not isProbablyABrowser(Headers):
        acceptHeader = Headers.get('Accept')
        if not acceptHeader:
            yield showAllowedContentTypes()
            return

        yield proxyToOwlim(queryArgument=queryArgument, queryResultFormat=acceptHeader)
        return

    if contentType is None:
        yield renderForm(arguments=arguments, Method=Method, **kwargs)
        return

    if contentType == "html":
        yield showHtmlResults(queryArgument)
        return

    yield proxyToOwlim(queryArgument=queryArgument, queryResultFormat=contentType)

def proxyToOwlim(queryArgument, queryResultFormat):
    try:
        results = yield observable.any.executeQuery(query=queryArgument, queryResultFormat=queryResultFormat)
        yield "HTTP/1.0 200 Ok\r\n"
        yield "Content-Type: %s\r\n" % queryResultFormat
        yield "\r\n"
        while results:
            block = results[:1024]
            results = results[1024:]
            yield block
    except IOError, e:
        if " 406 " in str(e):
            yield showAllowedContentTypes()
            return
        yield str(e)

def showAllowedContentTypes():
    yield "HTTP/1.0 406 Not Allowed\r\n"
    yield "Content-Type: text/plain\r\n\r\n"
    yield """Allowed mimetypes are:
- application/sparql-results+xml
- application/sparql-results+json
- application/x-binary-rdf-results-table"""

def renderForm(arguments, **kwargs):
    queryArgument = arguments.get("query", [''])[0]
    yield page.header(**kwargs)
    yield page.caption("Open Annotation Service")
    yield page.menu(selected="SparQL")

    yield "<p>Please input a valid SparQL query in the textbox below. The specification for SparQL queries can be found <a href='http://www.w3.org/TR/rdf-sparql-query/' target='_blank'>here</a>.</p>"
    yield "<p>The MIME types <code>application/sparql-results+xml</code> and <code>application/sparql-results+json</code> are supported by the sparql endpoint. The MIME type can be specified using the <code>contentType</code> parameter to the sparql endpoint or using the HTTP <code>Accept</code> header.</p>"
    yield """<form method='get'>
    <textarea name='query' cols='80' rows='10'>"""
    yield queryArgument
    yield """</textarea>
    <br />
    <select name="contentType">
    """
    for label, mime in CONTENT_TYPES:
        yield '<option value="%s">%s</option>\n' % (mime, label)
    yield """
    </select>
    <input type='submit' value='Query'>
    </form>"""

    if queryArgument != "":
        yield showHtmlResults(queryArgument)
    
    yield page.footer()
    
def showHtmlResults(query):    
    queryResult = yield observable.any.executeQuery(query)
    queryResult = list(queryResult)
    if len(queryResult) == 0:
        yield "No results"
        return
   
    yield "Number of records: %s" % len(queryResult)
    keyOrder = sorted(queryResult[0].keys()) 

    yield "<table border='1' style='border-collapse:collapse'>"
    yield "<tr>"
    for key in keyOrder:
        yield "<th>%s</th>" % key
    yield "</tr>"
    for item in queryResult:
        yield "<tr>"
        for key in keyOrder:
            value = item[key]
            yield "<td>%s</td>" %value 
        yield "</tr>"
    yield "</table>"

