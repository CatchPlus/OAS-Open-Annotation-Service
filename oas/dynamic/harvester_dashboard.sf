## begin license ##
# 
# "Open Annotation Service" enables exchange, storage and search of
# heterogeneous annotations using a uniform format (Open Annotation format) and
# a uniform web service interface. 
# 
# Copyright (C) 2012 Meertens Instituut (KNAW) http://meertens.knaw.nl
# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
# 
# This file is part of "Open Annotation Service"
# 
# "Open Annotation Service" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# "Open Annotation Service" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with "Open Annotation Service"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
# 
## end license ##

import page

def main(arguments, session, path, **kwargs):
    if not page.adminLoggedIn(session):
        yield http.redirect('/')
        return
    yield page.header(session=session, **kwargs)
    yield page.caption("Open Annotation Service")
    yield page.menu()
    yield page.displayMessage(session, 'Harvester.formValues')

    views = {
        'errorlog': errorlog,
        'details': details
    }
    view = path.rsplit('/', 1)[-1]
    yield views.get(view, overview)(arguments=arguments, session=session, path=path, **kwargs)
    
    yield page.footer()

def details(session, arguments, **kwargs):
    
    repositoryName = arguments['repository'][0]
    repository = observable.call.getRepository(repositoryName)
    yield """<div id='repository'>
    <fieldset>
        <legend>Edit repository: %s</legend>
    <form action="/harvester.action/update" method="post">
        <table>\n""" % repository.name

    apiKeys = sorted(observable.call.listApiKeysAndData(), key=lambda (apikey, userdata): userdata['username'].lower())
    yield '<tr><td>Base URL</td><td><input type="text" name="baseUrl" value=%s/></td></tr>\n' % quoteattr(repository.baseUrl)
    yield '<tr><td>Metadata Prefix</td><td><input type="text" name="metadataPrefix" value=%s/></td></tr>\n' % quoteattr(repository.metadataPrefix)
    yield '<tr><td>Set Spec</td><td><input type="text" name="setSpec" value=%s/></td></tr>\n' % quoteattr(repository.setSpec)
    yield '<tr><td>User</td><td><select name="apiKey">'
    for (apiKey, userdata) in apiKeys:
        yield "<option value=%s%s>%s</option>" % (quoteattr(apiKey), 'SELECTED' if apiKey == repository.apiKey else '', escapeHtml("%s (%s)" % (userdata['username'], apiKey)))
    yield "</select></td></tr>"

    yield '<tr><td>Active</td><td><input type="checkbox" name="active" %s/></td></tr>\n' % ('CHECKED' if repository.active else '')
    yield """<tr><td><input type="hidden" name="repository" value=%s/><input type="hidden" name="formUrl" value="/harvester_dashboard"/><button onclick="javascript:document.location='/harvester_dashboard';return false;">Cancel</button><input type="submit" value="Save"/></td></tr>\n""" % quoteattr(repository.name)
    yield "</table>\n"
    yield "</form>\n"
    yield """<form action="/harvester.action/delete" method="post">
    <p>
        <input type="hidden" name="formUrl" value="/harvester_dashboard"/>
        <input type="hidden" name="repository" value=%s/>

        <input type="submit" value="Delete" onclick="javascript:return confirm('Are you sure?');"/>
    </p></form>""" % quoteattr(repository.name)
    yield '</fieldset>'
    yield "</div>"

def errorlog(arguments, **kwargs):
    repositoryName = arguments['repository'][0]
    repository = observable.call.getRepository(repositoryName)
    errorLog = repository.readErrorLog()

    yield """<div id='repository'>
    <fieldset>
        <legend>Errorlog repository: %s</legend>""" % repository.name
    if errorLog != '':
        yield '<pre>%s</pre>' % '<br/>'.join(escapeHtml(errorLog).split('\n'))
    else:
        yield "<p>No errors logged</p>"

    yield """</fieldset>
    </div>"""


def overview(session, **kwargs):
    yield '<div id="harvester">'

    repositories = list(observable.call.getRepositories())
    if len(repositories) > 0:
        yield renderRepositories(repositories)


    yield """<form method="post" action="/harvester.action/create">
    <dl>
        <dt>New repository</dt>
        <dd><input type="text" name="repository" value=""/></dd>
        <dd class="submit">
            <input type="submit" value="Create"/>
            <input type="hidden" name="formUrl" value="/harvester_dashboard/details?repository=%(repository)s"/>
        </dd>
    </dl>
</form>"""

    yield "</div>"

def renderRepositories(repositories):
    yield "<table>" 
    yield "<tr>%s</tr>" % ''.join('<th>%s</th>' % label for label in ['', 'Name', 'Base URL','MetadataPrefix','SetSpec','User', 'Active', 'Error log'])
    for repository in repositories:
        yield "<tr>"
        yield """<td><button onClick="javascript:document.location='/harvester_dashboard/details?%s'">Edit</button></td>""" % urlencode(dict(repository=repository.name))
        yield '<td>%s</td>' % escapeHtml(repository.name)
        yield '<td>%s</td>' % escapeHtml(repository.baseUrl)
        yield '<td>%s</td>' % escapeHtml(repository.metadataPrefix)
        yield '<td>%s</td>' % escapeHtml(repository.setSpec)

        userdata = observable.call.getForApiKey(repository.apiKey)
        yield '<td>%s</td>' % escapeHtml(userdata['username'] if userdata else "")
        yield '<td>%s</td>' % repository.active
        yield '<td><a href="/harvester_dashboard/errorlog?%s">View</a></td>' % urlencode(dict(repository=repository.name))
        yield '</tr>'
    yield "</table>"

