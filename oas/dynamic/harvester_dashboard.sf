## begin license ##
# 
# "Open Annotation Service" enables exchange, storage and search of
# heterogeneous annotations using a uniform format (Open Annotation format) and
# a uniform web service interface. 
# 
# Copyright (C) 2012 Meertens Instituut (KNAW) http://meertens.knaw.nl
# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
# 
# This file is part of "Open Annotation Service"
# 
# "Open Annotation Service" is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# "Open Annotation Service" is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with "Open Annotation Service"; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
# 
## end license ##

import page

def main(session, **kwargs):
    if not page.adminLoggedIn(session):
        yield http.redirect('/')
        return
    yield page.header(session=session, **kwargs)
    yield page.caption("Open Annotation Service")
    yield page.menu()

    yield '<div id="harvester">'

    repositories = list(observable.call.getRepositories())
    if len(repositories) > 0:
        yield renderRepositories(repositories)


    yield """<form method="POST" name="create" action="/harvester.action/create">
    <input type="hidden" name="formUrl" value="/harvester_dashboard"/>
    <dl>
        <dt>New repository</dt>
        <dd><input type="text" name="repository" value=""/></dd>
        <dd class="submit"><input type="submit" value="Create"/></dd>
    </dl>
</form>"""

    yield "</div>"
    yield page.footer()

def quoteattr2(value):
    return quoteattr(value) if value else "''"

def renderRepositories(repositories):
    yield "<table>" 
    yield "<tr>%s</tr>" % ''.join('<th>%s</th>' % label for label in ['Name', 'Base URL','MetadataPrefix','SetSpec','ApiKey', 'Active'])
    for repository in repositories:
        yield "<tr>"
        yield '<td>%s</td>' % repository.name
        yield '<td><input type="text" name="baseUrl" value=%s/></td>' % quoteattr2(repository.baseUrl)
        yield '<td><input type="text" name="metadataPrefix" value=%s/></td>' % quoteattr2(repository.metadataPrefix)
        yield '<td><input type="text" name="setSpec" value=%s/></td>' % quoteattr2(repository.setSpec)
        yield '<td><input type="text" name="apiKey" value=%s/></td>' % quoteattr2(repository.apiKey)
        yield '<td><input type="checkbox" name="active" value=%s/></td>' % quoteattr2(repository.active)
        yield '</tr>'
    yield "</table>"
